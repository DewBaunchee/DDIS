package by.varyvoda.bankapp.domain.repository.impl

import by.varyvoda.bankapp.domain.dependency.DependencyProvider
import by.varyvoda.bankapp.domain.model.Client
import by.varyvoda.bankapp.domain.model.Sex
import by.varyvoda.bankapp.domain.repository.AbstractRepository
import by.varyvoda.bankapp.domain.repository.mapping.EntityMapping
import java.time.LocalDate

class ClientRepository : AbstractRepository<String, Client>(
    EntityMapping(
        "client",
        { Client() },
        DependencyProvider.get().run {
            val cityRep = provide(CityRepository::class.java)
            val maritalStatusRep = provide(MaritalStatusRepository::class.java)
            val countryRep = provide(CountryRepository::class.java)
            val disabilityRep = provide(DisabilityRepository::class.java)
            return@run listOf(
                EntityMapping.Field(
                    false,
                    isAutogenerated = false,
                    columnName = "last_name",
                    plainType = String::class.java,
                    getter = { lastName },
                    setter = { lastName = it!! }
                ),
                EntityMapping.Field(
                    false,
                    isAutogenerated = false,
                    columnName = "first_name",
                    plainType = String::class.java,
                    getter = { firstName },
                    setter = { firstName = it!! }
                ),
                EntityMapping.Field(
                    false,
                    isAutogenerated = false,
                    columnName = "patronymic",
                    plainType = String::class.java,
                    getter = { patronymic },
                    setter = { patronymic = it!! }
                ),
                EntityMapping.Field(
                    false,
                    isAutogenerated = false,
                    columnName = "birthday",
                    plainType = LocalDate::class.java,
                    getter = { birthday },
                    setter = { birthday = it!! }
                ),
                EntityMapping.Field(
                    false,
                    isAutogenerated = false,
                    columnName = "sex",
                    plainType = String::class.java,
                    getter = { sex.toString().lowercase() },
                    setter = { sex = Sex.valueOf(it!!.uppercase()) }
                ),
                EntityMapping.Field(
                    false,
                    isAutogenerated = false,
                    columnName = "passport_series",
                    plainType = String::class.java,
                    getter = { passportSeries },
                    setter = { passportSeries = it!! }
                ),
                EntityMapping.Field(
                    false,
                    isAutogenerated = false,
                    columnName = "passport_number",
                    plainType = String::class.java,
                    getter = { passportNumber },
                    setter = { passportNumber = it!! }
                ),
                EntityMapping.Field(
                    false,
                    isAutogenerated = false,
                    columnName = "produced_by",
                    plainType = String::class.java,
                    getter = { producedBy },
                    setter = { producedBy = it!! }
                ),
                EntityMapping.Field(
                    false,
                    isAutogenerated = false,
                    columnName = "producing_date",
                    plainType = LocalDate::class.java,
                    getter = { producingDate },
                    setter = { producingDate = it!! }
                ),
                EntityMapping.Field(
                    true,
                    isAutogenerated = false,
                    columnName = "id",
                    plainType = String::class.java,
                    getter = { id },
                    setter = { id = it!! }
                ),
                EntityMapping.Field(
                    false,
                    isAutogenerated = false,
                    columnName = "birthplace",
                    plainType = String::class.java,
                    getter = { birthplace },
                    setter = { birthplace = it!! }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "residence_city",
                    plainType = Int::class.java,
                    getter = { residenceCity.id },
                    setter = { residenceCity = cityRep.get(it!!)!! }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "residence_address",
                    plainType = String::class.java,
                    getter = { residenceAddress },
                    setter = { residenceAddress = it!! }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "home_phone_number",
                    plainType = String::class.java,
                    getter = { homePhoneNumber },
                    setter = { homePhoneNumber = it }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "mobile_phone_number",
                    plainType = String::class.java,
                    getter = { mobilePhoneNumber },
                    setter = { mobilePhoneNumber = it }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "email",
                    plainType = String::class.java,
                    getter = { email },
                    setter = { email = it }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "marital_status",
                    plainType = Int::class.java,
                    getter = { maritalStatus.id },
                    setter = { maritalStatus = maritalStatusRep.get(it!!)!! }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "citizenship",
                    plainType = String::class.java,
                    getter = { citizenship.key },
                    setter = { citizenship = countryRep.get(it!!)!! }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "disability",
                    plainType = Int::class.java,
                    getter = { disability.id },
                    setter = { disability = disabilityRep.get(it!!)!! }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "pensioner",
                    plainType = Boolean::class.java,
                    getter = { pensioner },
                    setter = { pensioner = it!! }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "month_income",
                    plainType = Int::class.java,
                    getter = { monthIncome },
                    setter = { monthIncome = it ?: -1 }
                ),
                EntityMapping.Field(
                    isId = false,
                    isAutogenerated = false,
                    columnName = "conscript",
                    plainType = Boolean::class.java,
                    getter = { conscript },
                    setter = { conscript = it!! }
                ),
            )
        }
    )
)